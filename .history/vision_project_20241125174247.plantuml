@startuml GeneratePyramids
skinparam conditionStyle InsideDiamond
skinparam ConditionEndStyle hline

:start;
:**input**: img, kernel_size=5, sigma=2;

partition Initial Setup {
    :if img is of type uint8 then;
    if (img is of type uint8?) then (True)
        :img = double(img) / 255.0;
    endif
    :[m, n, c] = size(img);
    :max_n = ceil(log2(m) - 3);
    :g_pyramid = {img};
    :l_pyramid = {};
    :gaussian_kernel = fspecial('gaussian', [kernel_size, kernel_size], sigma);
}

partition Pyramid Generation Loop {
    :i = 1;
    while (i <= max_n?) is (True)
        :img_blur = imfilter(img, gaussian_kernel, "replicate", "same", "conv");
        :img_downsampled = imresize(img_blur, 0.5, "nearest");
        :upsample_size = size(img);
        :upsample_size = upsample_size(1:2);
        :img_upsampled = imresize(img_downsampled, upsample_size, "nearest");
        :g_pyramid(i + 1) = {img_downsampled};
        :l_pyramid(i) = {img - img_upsampled};
        :img = img_downsampled;
        :i++;
    endwhile (False)
    :l_pyramid(max_n + 1) = {img};
}

partition concatenate_image_pyramid {
    :Parse input parameters with margin=2;
    :[m, n, c] = size(imgs{1});
    :Initialize canvas with zeros of size [m ceil(n*1.5 + margin) c];
    :Place imgs{1} in the canvas;
    
    :Set pm = 1;
    :Set pn = n + 1 + margin;
    while (i <= size(imgs, 1)) is (True)
        :[m, n, c] = size(imgs{i});
        :Place imgs{i} in canvas at position [pm:pm+m-1, pn:pn+n-1, 1:c];
        :Update pm = pm + m;
        :i++;
    endwhile (False)
}

partition display_image_pyramid {

    :Parse input parameters with margin=2;
    :N = size(imgs, 1);
    :Create canvas by calling concatenate_image_pyramid;
    :[ch, cw, ~] = size(canvas);
    :Calculate margin as margin / N / cw;
    :Set pm = margin;
    :Create a figure;
    while (i <= N) is (True)
        :Display subplot with imgs{i};
        :Add text annotation with size information;
        :Update pm = pm + 1/N + margin;
        :i++;
    endwhile (False)
    :Display the complete canvas in a subplot;
    :Set figure position with [100, 100, cw, ch*1.3];

}

:**output**: g_pyramid, l_pyramid;
@enduml
