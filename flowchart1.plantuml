@startuml GeneratePyramids
skinparam conditionStyle InsideDiamond
skinparam ConditionEndStyle hline

:start;
:**input**: img, kernel_size, sigma/

partition Initial Setup {
    if (img value type is uint8?) then (True)
        :img = double(img) / 255.0]
    endif
    :[m, n, c] = size(img) ]
    :max_n = ceil(log2(m) - 3) ]
    :g_pyramid = {img}\nl_pyramid = {} ]
    :gaussian_kernel = fspecial('gaussian', [kernel_size, kernel_size], sigma) ]
}

partition Pyramid Generation Loop {
    :i = 1;
    while (i <= max_n?) is (True)
        :img_blur = imfilter(img, gaussian_kernel, "replicate", "same", "conv") ]
        :img_downsampled = imresize(img_blur, 0.5, "nearest") ]
        :upsample_size = size(img) ]
        :upsample_size = upsample_size(1:2) ]
        :img_upsampled = imresize(img_downsampled, upsample_size, "nearest") ]
        :g_pyramid(i + 1) = {img_downsampled} ]
        :l_pyramid(i) = {img - img_upsampled} ]
        :img = img_downsampled ]
        :i++ ]
    endwhile (False)
    :l_pyramid(max_n + 1) = {img} ]
}
:**Output**: {g_pyramid, l_pyramid} /


partition Display Image Pyramid {

    :margin=2]
    :N = size(imgs, 1) ]
    partition concatenate_image_pyramid {
        :[m, n, c] = size(imgs{1}) ]
        :Initialize canvas with zeros of size [m ceil(n*1.5 + margin) c] ]
        :Place imgs{1} in the leftside of canvas ]
        
        :pm = 1]
        :pn = n + 1 + margin]
        while (i <= size(imgs, 1)) is (True)
            :[m, n, c] = size(imgs{i}) ]
            :Place imgs{i} in canvas at position [pm:pm+m-1, pn:pn+n-1, 1:c] ]
            :Update pm = pm + m ]
            :i++ ]
        endwhile (False)
    }
    :[ch, cw, ~] = size(canvas)]
    :margin = margin / N / cw]
    :pm = margin]
    :Create a figure]
    partition Display First Row with Resolution Texts{
        while (i <= N) is (True)
            :subplot('Position', [pm 0.8 1/N 0.2]) ]
            :imshow(imgs{i},[]) ]
            :text(0.5, -0.2, sprintf( '%dx%d', size(imgs{i},[1 2]) ), \n 'HorizontalAlignment', 'center', 'VerticalAlignment', 'bottom', \n'FontSize', 10, 'Color', 'k', 'Units','normalized') ]
            :pm = pm + 1/N + margin]
            :i++]
        endwhile (False)
    }
    :subplot('Position', [margin margin 1-margin 0.8-margin]) ]
    :imshow(canvas,[]) ]
    :set(gcf, 'Position', [100, 100, cw, ch*1.3]) ]

}
 :end;
@enduml
